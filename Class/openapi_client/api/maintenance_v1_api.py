# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.maintenance_tracking_domain_dto_v1 import MaintenanceTrackingDomainDtoV1
from openapi_client.models.maintenance_tracking_feature_collection_v1 import MaintenanceTrackingFeatureCollectionV1
from openapi_client.models.maintenance_tracking_feature_v1 import MaintenanceTrackingFeatureV1
from openapi_client.models.maintenance_tracking_latest_feature_collection_v1 import MaintenanceTrackingLatestFeatureCollectionV1
from openapi_client.models.maintenance_tracking_task_dto_v1 import MaintenanceTrackingTaskDtoV1

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class MaintenanceV1Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def find_latest_maintenance_trackings(
        self,
        end_from: Annotated[Optional[datetime], Field(description="Return routes which have completed onwards from the given time (inclusive). Default is -1h from now and maximum -24h.")] = None,
        x_min: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value")] = None,
        y_min: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value")] = None,
        x_max: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value")] = None,
        y_max: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value")] = None,
        task_id: Annotated[Optional[List[StrictStr]], Field(description="Task ids to include. Any route containing one of the selected tasks will be returned.")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Data domains. If domain is not given default value of \"state-roads\" will be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MaintenanceTrackingLatestFeatureCollectionV1:
        """Road maintenance tracking routes latest points


        :param end_from: Return routes which have completed onwards from the given time (inclusive). Default is -1h from now and maximum -24h.
        :type end_from: datetime
        :param x_min: Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value
        :type x_min: float
        :param y_min: Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value
        :type y_min: float
        :param x_max: Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value
        :type x_max: float
        :param y_max: Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value
        :type y_max: float
        :param task_id: Task ids to include. Any route containing one of the selected tasks will be returned.
        :type task_id: List[str]
        :param domain: Data domains. If domain is not given default value of \"state-roads\" will be used.
        :type domain: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_latest_maintenance_trackings_serialize(
            end_from=end_from,
            x_min=x_min,
            y_min=y_min,
            x_max=x_max,
            y_max=y_max,
            task_id=task_id,
            domain=domain,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingLatestFeatureCollectionV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_latest_maintenance_trackings_with_http_info(
        self,
        end_from: Annotated[Optional[datetime], Field(description="Return routes which have completed onwards from the given time (inclusive). Default is -1h from now and maximum -24h.")] = None,
        x_min: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value")] = None,
        y_min: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value")] = None,
        x_max: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value")] = None,
        y_max: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value")] = None,
        task_id: Annotated[Optional[List[StrictStr]], Field(description="Task ids to include. Any route containing one of the selected tasks will be returned.")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Data domains. If domain is not given default value of \"state-roads\" will be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MaintenanceTrackingLatestFeatureCollectionV1]:
        """Road maintenance tracking routes latest points


        :param end_from: Return routes which have completed onwards from the given time (inclusive). Default is -1h from now and maximum -24h.
        :type end_from: datetime
        :param x_min: Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value
        :type x_min: float
        :param y_min: Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value
        :type y_min: float
        :param x_max: Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value
        :type x_max: float
        :param y_max: Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value
        :type y_max: float
        :param task_id: Task ids to include. Any route containing one of the selected tasks will be returned.
        :type task_id: List[str]
        :param domain: Data domains. If domain is not given default value of \"state-roads\" will be used.
        :type domain: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_latest_maintenance_trackings_serialize(
            end_from=end_from,
            x_min=x_min,
            y_min=y_min,
            x_max=x_max,
            y_max=y_max,
            task_id=task_id,
            domain=domain,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingLatestFeatureCollectionV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_latest_maintenance_trackings_without_preload_content(
        self,
        end_from: Annotated[Optional[datetime], Field(description="Return routes which have completed onwards from the given time (inclusive). Default is -1h from now and maximum -24h.")] = None,
        x_min: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value")] = None,
        y_min: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value")] = None,
        x_max: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value")] = None,
        y_max: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value")] = None,
        task_id: Annotated[Optional[List[StrictStr]], Field(description="Task ids to include. Any route containing one of the selected tasks will be returned.")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Data domains. If domain is not given default value of \"state-roads\" will be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Road maintenance tracking routes latest points


        :param end_from: Return routes which have completed onwards from the given time (inclusive). Default is -1h from now and maximum -24h.
        :type end_from: datetime
        :param x_min: Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value
        :type x_min: float
        :param y_min: Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value
        :type y_min: float
        :param x_max: Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value
        :type x_max: float
        :param y_max: Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value
        :type y_max: float
        :param task_id: Task ids to include. Any route containing one of the selected tasks will be returned.
        :type task_id: List[str]
        :param domain: Data domains. If domain is not given default value of \"state-roads\" will be used.
        :type domain: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_latest_maintenance_trackings_serialize(
            end_from=end_from,
            x_min=x_min,
            y_min=y_min,
            x_max=x_max,
            y_max=y_max,
            task_id=task_id,
            domain=domain,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingLatestFeatureCollectionV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_latest_maintenance_trackings_serialize(
        self,
        end_from,
        x_min,
        y_min,
        x_max,
        y_max,
        task_id,
        domain,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'taskId': 'multi',
            'domain': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if end_from is not None:
            if isinstance(end_from, datetime):
                _query_params.append(
                    (
                        'endFrom',
                        end_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endFrom', end_from))
            
        if x_min is not None:
            
            _query_params.append(('xMin', x_min))
            
        if y_min is not None:
            
            _query_params.append(('yMin', y_min))
            
        if x_max is not None:
            
            _query_params.append(('xMax', x_max))
            
        if y_max is not None:
            
            _query_params.append(('yMax', y_max))
            
        if task_id is not None:
            
            _query_params.append(('taskId', task_id))
            
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json;charset=UTF-8'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/maintenance/v1/tracking/routes/latest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_maintenance_trackings(
        self,
        end_from: Annotated[Optional[datetime], Field(description="Return routes which have completed onwards from the given time (inclusive). Default is 24h in past and maximum interval between from and to is 24h.")] = None,
        end_before: Annotated[Optional[datetime], Field(description="Return routes which have completed before the given end time (exclusive). Default is now and maximum interval between from and to is 24h.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Return routes which have been created after the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Return routes which have been created before the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.")] = None,
        x_min: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value")] = None,
        y_min: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value")] = None,
        x_max: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value")] = None,
        y_max: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value")] = None,
        task_id: Annotated[Optional[List[StrictStr]], Field(description="Task ids to include. Any tracking containing one of the selected tasks will be returned.")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Data domains. If domain is not given default value of \"state-roads\" will be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MaintenanceTrackingFeatureCollectionV1:
        """Road maintenance tracking routes


        :param end_from: Return routes which have completed onwards from the given time (inclusive). Default is 24h in past and maximum interval between from and to is 24h.
        :type end_from: datetime
        :param end_before: Return routes which have completed before the given end time (exclusive). Default is now and maximum interval between from and to is 24h.
        :type end_before: datetime
        :param created_after: Return routes which have been created after the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.
        :type created_after: datetime
        :param created_before: Return routes which have been created before the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.
        :type created_before: datetime
        :param x_min: Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value
        :type x_min: float
        :param y_min: Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value
        :type y_min: float
        :param x_max: Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value
        :type x_max: float
        :param y_max: Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value
        :type y_max: float
        :param task_id: Task ids to include. Any tracking containing one of the selected tasks will be returned.
        :type task_id: List[str]
        :param domain: Data domains. If domain is not given default value of \"state-roads\" will be used.
        :type domain: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_maintenance_trackings_serialize(
            end_from=end_from,
            end_before=end_before,
            created_after=created_after,
            created_before=created_before,
            x_min=x_min,
            y_min=y_min,
            x_max=x_max,
            y_max=y_max,
            task_id=task_id,
            domain=domain,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingFeatureCollectionV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_maintenance_trackings_with_http_info(
        self,
        end_from: Annotated[Optional[datetime], Field(description="Return routes which have completed onwards from the given time (inclusive). Default is 24h in past and maximum interval between from and to is 24h.")] = None,
        end_before: Annotated[Optional[datetime], Field(description="Return routes which have completed before the given end time (exclusive). Default is now and maximum interval between from and to is 24h.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Return routes which have been created after the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Return routes which have been created before the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.")] = None,
        x_min: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value")] = None,
        y_min: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value")] = None,
        x_max: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value")] = None,
        y_max: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value")] = None,
        task_id: Annotated[Optional[List[StrictStr]], Field(description="Task ids to include. Any tracking containing one of the selected tasks will be returned.")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Data domains. If domain is not given default value of \"state-roads\" will be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MaintenanceTrackingFeatureCollectionV1]:
        """Road maintenance tracking routes


        :param end_from: Return routes which have completed onwards from the given time (inclusive). Default is 24h in past and maximum interval between from and to is 24h.
        :type end_from: datetime
        :param end_before: Return routes which have completed before the given end time (exclusive). Default is now and maximum interval between from and to is 24h.
        :type end_before: datetime
        :param created_after: Return routes which have been created after the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.
        :type created_after: datetime
        :param created_before: Return routes which have been created before the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.
        :type created_before: datetime
        :param x_min: Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value
        :type x_min: float
        :param y_min: Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value
        :type y_min: float
        :param x_max: Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value
        :type x_max: float
        :param y_max: Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value
        :type y_max: float
        :param task_id: Task ids to include. Any tracking containing one of the selected tasks will be returned.
        :type task_id: List[str]
        :param domain: Data domains. If domain is not given default value of \"state-roads\" will be used.
        :type domain: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_maintenance_trackings_serialize(
            end_from=end_from,
            end_before=end_before,
            created_after=created_after,
            created_before=created_before,
            x_min=x_min,
            y_min=y_min,
            x_max=x_max,
            y_max=y_max,
            task_id=task_id,
            domain=domain,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingFeatureCollectionV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_maintenance_trackings_without_preload_content(
        self,
        end_from: Annotated[Optional[datetime], Field(description="Return routes which have completed onwards from the given time (inclusive). Default is 24h in past and maximum interval between from and to is 24h.")] = None,
        end_before: Annotated[Optional[datetime], Field(description="Return routes which have completed before the given end time (exclusive). Default is now and maximum interval between from and to is 24h.")] = None,
        created_after: Annotated[Optional[datetime], Field(description="Return routes which have been created after the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.")] = None,
        created_before: Annotated[Optional[datetime], Field(description="Return routes which have been created before the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.")] = None,
        x_min: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value")] = None,
        y_min: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value")] = None,
        x_max: Annotated[Optional[Union[Annotated[float, Field(le=32, strict=True, ge=19)], Annotated[int, Field(le=32, strict=True, ge=19)]]], Field(description="Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value")] = None,
        y_max: Annotated[Optional[Union[Annotated[float, Field(le=72, strict=True, ge=59)], Annotated[int, Field(le=72, strict=True, ge=59)]]], Field(description="Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value")] = None,
        task_id: Annotated[Optional[List[StrictStr]], Field(description="Task ids to include. Any tracking containing one of the selected tasks will be returned.")] = None,
        domain: Annotated[Optional[List[StrictStr]], Field(description="Data domains. If domain is not given default value of \"state-roads\" will be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Road maintenance tracking routes


        :param end_from: Return routes which have completed onwards from the given time (inclusive). Default is 24h in past and maximum interval between from and to is 24h.
        :type end_from: datetime
        :param end_before: Return routes which have completed before the given end time (exclusive). Default is now and maximum interval between from and to is 24h.
        :type end_before: datetime
        :param created_after: Return routes which have been created after the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.
        :type created_after: datetime
        :param created_before: Return routes which have been created before the given time (exclusive). Maximum interval between createdFrom and createdTo is 24h.
        :type created_before: datetime
        :param x_min: Minimum x coordinate (longitude) Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMin coordinate will be rounded to nearest integer that is less than or equal to given value
        :type x_min: float
        :param y_min: Minimum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMin coordinate will be rounded to nearest half that is less than or equal to given value
        :type y_min: float
        :param x_max: Maximum x coordinate (longitude). Coordinates are in WGS84 format in decimal degrees. Values between 19.0 and 32.0.<br>xMax coordinate will be rounded to nearest integer greater than or equal to given value
        :type x_max: float
        :param y_max: Maximum y coordinate (latitude). Coordinates are in WGS84 format in decimal degrees. Values between 59.0 and 72.0.<br>yMax coordinate will be rounded to nearest half that is greater than or equal to given value
        :type y_max: float
        :param task_id: Task ids to include. Any tracking containing one of the selected tasks will be returned.
        :type task_id: List[str]
        :param domain: Data domains. If domain is not given default value of \"state-roads\" will be used.
        :type domain: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_maintenance_trackings_serialize(
            end_from=end_from,
            end_before=end_before,
            created_after=created_after,
            created_before=created_before,
            x_min=x_min,
            y_min=y_min,
            x_max=x_max,
            y_max=y_max,
            task_id=task_id,
            domain=domain,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingFeatureCollectionV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_maintenance_trackings_serialize(
        self,
        end_from,
        end_before,
        created_after,
        created_before,
        x_min,
        y_min,
        x_max,
        y_max,
        task_id,
        domain,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'taskId': 'multi',
            'domain': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if end_from is not None:
            if isinstance(end_from, datetime):
                _query_params.append(
                    (
                        'endFrom',
                        end_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endFrom', end_from))
            
        if end_before is not None:
            if isinstance(end_before, datetime):
                _query_params.append(
                    (
                        'endBefore',
                        end_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('endBefore', end_before))
            
        if created_after is not None:
            if isinstance(created_after, datetime):
                _query_params.append(
                    (
                        'createdAfter',
                        created_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAfter', created_after))
            
        if created_before is not None:
            if isinstance(created_before, datetime):
                _query_params.append(
                    (
                        'createdBefore',
                        created_before.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdBefore', created_before))
            
        if x_min is not None:
            
            _query_params.append(('xMin', x_min))
            
        if y_min is not None:
            
            _query_params.append(('yMin', y_min))
            
        if x_max is not None:
            
            _query_params.append(('xMax', x_max))
            
        if y_max is not None:
            
            _query_params.append(('yMax', y_max))
            
        if task_id is not None:
            
            _query_params.append(('taskId', task_id))
            
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json;charset=UTF-8'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/maintenance/v1/tracking/routes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_maintenance_tracking(
        self,
        id: Annotated[StrictInt, Field(description="Tracking id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MaintenanceTrackingFeatureV1:
        """Road maintenance tracking route with tracking id


        :param id: Tracking id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingFeatureV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_maintenance_tracking_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Tracking id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MaintenanceTrackingFeatureV1]:
        """Road maintenance tracking route with tracking id


        :param id: Tracking id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingFeatureV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_maintenance_tracking_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Tracking id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Road maintenance tracking route with tracking id


        :param id: Tracking id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MaintenanceTrackingFeatureV1",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_maintenance_tracking_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json;charset=UTF-8'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/maintenance/v1/tracking/routes/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_maintenance_tracking_domains(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MaintenanceTrackingDomainDtoV1]:
        """Road maintenance tracking domains


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MaintenanceTrackingDomainDtoV1]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_maintenance_tracking_domains_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MaintenanceTrackingDomainDtoV1]]:
        """Road maintenance tracking domains


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MaintenanceTrackingDomainDtoV1]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_maintenance_tracking_domains_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Road maintenance tracking domains


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_domains_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MaintenanceTrackingDomainDtoV1]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_maintenance_tracking_domains_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json;charset=UTF-8'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/maintenance/v1/tracking/domains',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_maintenance_tracking_tasks(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MaintenanceTrackingTaskDtoV1]:
        """Road maintenance tracking tasks


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_tasks_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MaintenanceTrackingTaskDtoV1]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_maintenance_tracking_tasks_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MaintenanceTrackingTaskDtoV1]]:
        """Road maintenance tracking tasks


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_tasks_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MaintenanceTrackingTaskDtoV1]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_maintenance_tracking_tasks_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Road maintenance tracking tasks


        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_maintenance_tracking_tasks_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MaintenanceTrackingTaskDtoV1]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_maintenance_tracking_tasks_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json;charset=UTF-8'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/maintenance/v1/tracking/tasks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


