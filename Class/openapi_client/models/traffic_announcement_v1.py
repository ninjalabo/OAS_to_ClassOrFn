# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.feature_v1 import FeatureV1
from openapi_client.models.last_active_itinerary_segment_v1 import LastActiveItinerarySegmentV1
from openapi_client.models.location_details_v1 import LocationDetailsV1
from openapi_client.models.location_v1 import LocationV1
from openapi_client.models.road_work_phase_v1 import RoadWorkPhaseV1
from openapi_client.models.time_and_duration_v1 import TimeAndDurationV1
from typing import Optional, Set
from typing_extensions import Self

class TrafficAnnouncementV1(BaseModel):
    """
    Announcement time and duration
    """ # noqa: E501
    language: StrictStr = Field(description="Language of the announcement, always fi. A subset of ISO 639-1 in upper case.")
    title: StrictStr = Field(description="Short description about the situation")
    location: Optional[LocationV1] = None
    location_details: Optional[LocationDetailsV1] = Field(default=None, alias="locationDetails")
    features: Optional[List[FeatureV1]] = Field(default=None, description="Features of the announcement")
    road_work_phases: Optional[List[RoadWorkPhaseV1]] = Field(default=None, description="Contains the phases of this road maintenance work", alias="roadWorkPhases")
    early_closing: Optional[StrictStr] = Field(default=None, description="Road work was closed before the planned time. 'CLOSED' means the road work closed after its start time, possibly skipping some phases. 'CANCELED' means the road work was canceled before its start time. Note: This field is null if the road work closes normally.", alias="earlyClosing")
    comment: Optional[StrictStr] = Field(default=None, description="Free comment")
    time_and_duration: Optional[TimeAndDurationV1] = Field(default=None, alias="timeAndDuration")
    additional_information: Optional[StrictStr] = Field(default=None, description="Additional information.", alias="additionalInformation")
    sender: StrictStr = Field(description="Name of the sender")
    last_active_itinerary_segment: Optional[LastActiveItinerarySegmentV1] = Field(default=None, alias="lastActiveItinerarySegment")
    __properties: ClassVar[List[str]] = ["language", "title", "location", "locationDetails", "features", "roadWorkPhases", "earlyClosing", "comment", "timeAndDuration", "additionalInformation", "sender", "lastActiveItinerarySegment"]

    @field_validator('language')
    def language_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['FI']):
            raise ValueError("must be one of enum values ('FI')")
        return value

    @field_validator('early_closing')
    def early_closing_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLOSED', 'CANCELED']):
            raise ValueError("must be one of enum values ('CLOSED', 'CANCELED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrafficAnnouncementV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_details
        if self.location_details:
            _dict['locationDetails'] = self.location_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item in self.features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in road_work_phases (list)
        _items = []
        if self.road_work_phases:
            for _item in self.road_work_phases:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roadWorkPhases'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_and_duration
        if self.time_and_duration:
            _dict['timeAndDuration'] = self.time_and_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_active_itinerary_segment
        if self.last_active_itinerary_segment:
            _dict['lastActiveItinerarySegment'] = self.last_active_itinerary_segment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrafficAnnouncementV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "language": obj.get("language"),
            "title": obj.get("title"),
            "location": LocationV1.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "locationDetails": LocationDetailsV1.from_dict(obj["locationDetails"]) if obj.get("locationDetails") is not None else None,
            "features": [FeatureV1.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "roadWorkPhases": [RoadWorkPhaseV1.from_dict(_item) for _item in obj["roadWorkPhases"]] if obj.get("roadWorkPhases") is not None else None,
            "earlyClosing": obj.get("earlyClosing"),
            "comment": obj.get("comment"),
            "timeAndDuration": TimeAndDurationV1.from_dict(obj["timeAndDuration"]) if obj.get("timeAndDuration") is not None else None,
            "additionalInformation": obj.get("additionalInformation"),
            "sender": obj.get("sender"),
            "lastActiveItinerarySegment": LastActiveItinerarySegmentV1.from_dict(obj["lastActiveItinerarySegment"]) if obj.get("lastActiveItinerarySegment") is not None else None
        })
        return _obj


