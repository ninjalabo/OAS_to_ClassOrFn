# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from openapi_client.models.line_string import LineString
    from openapi_client.models.multi_line_string import MultiLineString
    from openapi_client.models.multi_point import MultiPoint
    from openapi_client.models.multi_polygon import MultiPolygon
    from openapi_client.models.point import Point
    from openapi_client.models.polygon import Polygon

class GeometryObject(BaseModel):
    """
    GeoJson Geometry Object
    """ # noqa: E501
    type: StrictStr = Field(description="GeoJson Geometry Object type")
    coordinates: List[Dict[str, Any]] = Field(description="GeoJson Geometry Object coordinates")
    __properties: ClassVar[List[str]] = ["type", "coordinates"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon']):
            raise ValueError("must be one of enum values ('Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'LineString': 'LineString','MultiLineString': 'MultiLineString','MultiPoint': 'MultiPoint','MultiPolygon': 'MultiPolygon','Point': 'Point','Polygon': 'Polygon'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon]]:
        """Create an instance of GeometryObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[LineString, MultiLineString, MultiPoint, MultiPolygon, Point, Polygon]]:
        """Create an instance of GeometryObject from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'LineString':
            return import_module("openapi_client.models.line_string").LineString.from_dict(obj)
        if object_type ==  'MultiLineString':
            return import_module("openapi_client.models.multi_line_string").MultiLineString.from_dict(obj)
        if object_type ==  'MultiPoint':
            return import_module("openapi_client.models.multi_point").MultiPoint.from_dict(obj)
        if object_type ==  'MultiPolygon':
            return import_module("openapi_client.models.multi_polygon").MultiPolygon.from_dict(obj)
        if object_type ==  'Point':
            return import_module("openapi_client.models.point").Point.from_dict(obj)
        if object_type ==  'Polygon':
            return import_module("openapi_client.models.polygon").Polygon.from_dict(obj)

        raise ValueError("GeometryObject failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


