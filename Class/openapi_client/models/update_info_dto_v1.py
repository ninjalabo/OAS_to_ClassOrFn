# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateInfoDtoV1(BaseModel):
    """
    Info about API data updates (update intervals, last updated times)
    """ # noqa: E501
    api: StrictStr = Field(description="Url of the API")
    subtype: Optional[StrictStr] = Field(default=None, description="More specific info about API. Ie. domain info.")
    data_updated_time: datetime = Field(description="Data last updated time", alias="dataUpdatedTime")
    data_checked_time: Optional[datetime] = Field(default=None, description="Latest check for data updates.  <br> `null` value indicates data being pushed to our platform or static data that is only updated when needed.", alias="dataCheckedTime")
    data_update_interval: Optional[StrictStr] = Field(default=None, description="Data update interval in ISO-8601 duration format `PnDTnHnMn.nS`. <br> `P0S` means that data is updated in nearly real time. <br> `null` means that data is static and updated only when needed.", alias="dataUpdateInterval")
    recommended_fetch_interval: StrictStr = Field(description="Recommended fetch interval for clients in ISO-8601 duration format `PnDTnHnMn.nS`", alias="recommendedFetchInterval")
    __properties: ClassVar[List[str]] = ["api", "subtype", "dataUpdatedTime", "dataCheckedTime", "dataUpdateInterval", "recommendedFetchInterval"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateInfoDtoV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateInfoDtoV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api": obj.get("api"),
            "subtype": obj.get("subtype"),
            "dataUpdatedTime": obj.get("dataUpdatedTime"),
            "dataCheckedTime": obj.get("dataCheckedTime"),
            "dataUpdateInterval": obj.get("dataUpdateInterval"),
            "recommendedFetchInterval": obj.get("recommendedFetchInterval")
        })
        return _obj


