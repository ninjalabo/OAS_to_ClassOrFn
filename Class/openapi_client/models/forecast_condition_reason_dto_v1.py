# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ForecastConditionReasonDtoV1(BaseModel):
    """
    Forecast that is used is Vaisalaâ€™s weather forecast which is initialised from the weather model that performs best for Finland for a period under study. Majority of the times the initialisation is done from ECMWF model data. Then Vaisala meteorologists also manually edit the data to fix certain known errors in the model.
    """ # noqa: E501
    precipitation_condition: Optional[StrictStr] = Field(default=None, description="Precipitation condition:<br> 0 = no data available,<br> 1 = rain intensity lt 0.2 mm/h,<br> 2 = rain intensity ge 0.2 mm/h,<br> 3 = rain intensity ge 2.5 mm/h,<br> 4 = rain intensity ge 7.6 mm/h,<br> 5 = snowing intensity ge 0.2 cm/h,<br> 6 = snowing intensity ge 1 cm/h,<br> 7 = snowing intensity ge 3 cm/h<br> (lt = lower than, ge = greater or equal)", alias="precipitationCondition")
    road_condition: Optional[StrictStr] = Field(default=None, description="The state of the road", alias="roadCondition")
    wind_condition: Optional[StrictStr] = Field(default=None, description="The strength of wind", alias="windCondition")
    freezing_rain_condition: Optional[StrictBool] = Field(default=None, description="Tells if there is freezing rain: true/false", alias="freezingRainCondition")
    winter_slipperiness: Optional[StrictBool] = Field(default=None, description="Tells if it is slippery: true/false", alias="winterSlipperiness")
    visibility_condition: Optional[StrictStr] = Field(default=None, description="Visibility", alias="visibilityCondition")
    friction_condition: Optional[StrictStr] = Field(default=None, description="The amount of friction on the road", alias="frictionCondition")
    __properties: ClassVar[List[str]] = ["precipitationCondition", "roadCondition", "windCondition", "freezingRainCondition", "winterSlipperiness", "visibilityCondition", "frictionCondition"]

    @field_validator('precipitation_condition')
    def precipitation_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NO_DATA_AVAILABLE', 'NO_RAIN_DRY_WEATHER', 'LIGHT_RAIN', 'RAIN', 'HEAVY_RAIN', 'LIGHT_SNOWFALL', 'SNOWFALL', 'HEAVY_SNOWFALL']):
            raise ValueError("must be one of enum values ('NO_DATA_AVAILABLE', 'NO_RAIN_DRY_WEATHER', 'LIGHT_RAIN', 'RAIN', 'HEAVY_RAIN', 'LIGHT_SNOWFALL', 'SNOWFALL', 'HEAVY_SNOWFALL')")
        return value

    @field_validator('road_condition')
    def road_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DRY', 'MOIST', 'WET', 'SLUSH', 'FROST', 'PARTLY_ICY', 'ICE', 'SNOW']):
            raise ValueError("must be one of enum values ('DRY', 'MOIST', 'WET', 'SLUSH', 'FROST', 'PARTLY_ICY', 'ICE', 'SNOW')")
        return value

    @field_validator('wind_condition')
    def wind_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEAK', 'MEDIUM', 'STRONG']):
            raise ValueError("must be one of enum values ('WEAK', 'MEDIUM', 'STRONG')")
        return value

    @field_validator('visibility_condition')
    def visibility_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FAIRLY_POOR', 'POOR']):
            raise ValueError("must be one of enum values ('FAIRLY_POOR', 'POOR')")
        return value

    @field_validator('friction_condition')
    def friction_condition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SLIPPERY', 'VERY_SLIPPERY']):
            raise ValueError("must be one of enum values ('SLIPPERY', 'VERY_SLIPPERY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ForecastConditionReasonDtoV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ForecastConditionReasonDtoV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "precipitationCondition": obj.get("precipitationCondition"),
            "roadCondition": obj.get("roadCondition"),
            "windCondition": obj.get("windCondition"),
            "freezingRainCondition": obj.get("freezingRainCondition"),
            "winterSlipperiness": obj.get("winterSlipperiness"),
            "visibilityCondition": obj.get("visibilityCondition"),
            "frictionCondition": obj.get("frictionCondition")
        })
        return _obj


