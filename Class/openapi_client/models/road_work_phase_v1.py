# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.location_details_v1 import LocationDetailsV1
from openapi_client.models.location_v1 import LocationV1
from openapi_client.models.restriction_v1 import RestrictionV1
from openapi_client.models.time_and_duration_v1 import TimeAndDurationV1
from openapi_client.models.weekday_time_period_v1 import WeekdayTimePeriodV1
from openapi_client.models.work_type_v1 import WorkTypeV1
from typing import Optional, Set
from typing_extensions import Self

class RoadWorkPhaseV1(BaseModel):
    """
    A single phase in a larger road work
    """ # noqa: E501
    id: StrictStr = Field(description="id")
    location: Optional[LocationV1] = None
    location_details: Optional[LocationDetailsV1] = Field(default=None, alias="locationDetails")
    working_hours: List[WeekdayTimePeriodV1] = Field(description="WorkingHours of an traffic situation announcement", alias="workingHours")
    comment: Optional[StrictStr] = Field(default=None, description="Free comment")
    time_and_duration: TimeAndDurationV1 = Field(alias="timeAndDuration")
    work_types: Optional[List[WorkTypeV1]] = Field(default=None, description="The types of work that are carried out", alias="workTypes")
    restrictions: Optional[List[RestrictionV1]] = Field(default=None, description="Restrictions on traffic")
    restrictions_liftable: Optional[StrictBool] = Field(default=None, description="Restrictions can be lifted for abnormal transports", alias="restrictionsLiftable")
    severity: StrictStr = Field(description="Severity of the disruption to traffic. How severely this road work phase disrupts traffic. LOW - no disruption, HIGH - disruption, HIGHEST - significant disruption")
    slow_traffic_times: Optional[List[WeekdayTimePeriodV1]] = Field(default=None, description="Time periods when the road work is expected to cause slow moving traffic.", alias="slowTrafficTimes")
    queuing_traffic_times: Optional[List[WeekdayTimePeriodV1]] = Field(default=None, description="Time periods when the road work is expected to cause queuing of the traffic.", alias="queuingTrafficTimes")
    __properties: ClassVar[List[str]] = ["id", "location", "locationDetails", "workingHours", "comment", "timeAndDuration", "workTypes", "restrictions", "restrictionsLiftable", "severity", "slowTrafficTimes", "queuingTrafficTimes"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['LOW', 'HIGH', 'HIGHEST']):
            raise ValueError("must be one of enum values ('LOW', 'HIGH', 'HIGHEST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoadWorkPhaseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location_details
        if self.location_details:
            _dict['locationDetails'] = self.location_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in working_hours (list)
        _items = []
        if self.working_hours:
            for _item in self.working_hours:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workingHours'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_and_duration
        if self.time_and_duration:
            _dict['timeAndDuration'] = self.time_and_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in work_types (list)
        _items = []
        if self.work_types:
            for _item in self.work_types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['workTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item in self.restrictions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['restrictions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in slow_traffic_times (list)
        _items = []
        if self.slow_traffic_times:
            for _item in self.slow_traffic_times:
                if _item:
                    _items.append(_item.to_dict())
            _dict['slowTrafficTimes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in queuing_traffic_times (list)
        _items = []
        if self.queuing_traffic_times:
            for _item in self.queuing_traffic_times:
                if _item:
                    _items.append(_item.to_dict())
            _dict['queuingTrafficTimes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoadWorkPhaseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "location": LocationV1.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "locationDetails": LocationDetailsV1.from_dict(obj["locationDetails"]) if obj.get("locationDetails") is not None else None,
            "workingHours": [WeekdayTimePeriodV1.from_dict(_item) for _item in obj["workingHours"]] if obj.get("workingHours") is not None else None,
            "comment": obj.get("comment"),
            "timeAndDuration": TimeAndDurationV1.from_dict(obj["timeAndDuration"]) if obj.get("timeAndDuration") is not None else None,
            "workTypes": [WorkTypeV1.from_dict(_item) for _item in obj["workTypes"]] if obj.get("workTypes") is not None else None,
            "restrictions": [RestrictionV1.from_dict(_item) for _item in obj["restrictions"]] if obj.get("restrictions") is not None else None,
            "restrictionsLiftable": obj.get("restrictionsLiftable"),
            "severity": obj.get("severity"),
            "slowTrafficTimes": [WeekdayTimePeriodV1.from_dict(_item) for _item in obj["slowTrafficTimes"]] if obj.get("slowTrafficTimes") is not None else None,
            "queuingTrafficTimes": [WeekdayTimePeriodV1.from_dict(_item) for _item in obj["queuingTrafficTimes"]] if obj.get("queuingTrafficTimes") is not None else None
        })
        return _obj


