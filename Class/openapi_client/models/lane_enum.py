# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LaneEnum(BaseModel):
    """
    LaneEnum
    """ # noqa: E501
    value: Optional[StrictStr] = None
    get_extended_value: Optional[StrictStr] = Field(default=None, alias="get_ExtendedValue")
    __properties: ClassVar[List[str]] = ["value", "get_ExtendedValue"]

    @field_validator('value')
    def value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL_LANES_COMPLETE_CARRIAGEWAY', 'BUS_LANE', 'BUS_STOP', 'CAR_POOL_LANE', 'CENTRAL_RESERVATION', 'CRAWLER_LANE', 'CYCLE_LANE', 'EMERGENCY_LANE', 'ESCAPE_LANE', 'EXPRESS_LANE', 'HARD_SHOULDER', 'HEAVY_VEHICLE_LANE', 'LAY_BY', 'LEFT_HAND_TURNING_LANE', 'LEFT_LANE', 'LOCAL_TRAFFIC_LANE', 'MIDDLE_LANE', 'OVERTAKING_LANE', 'RIGHT_HAND_TURNING_LANE', 'RIGHT_LANE', 'RUSH_HOUR_LANE', 'SET_DOWN_AREA', 'SLOW_VEHICLE_LANE', 'THROUGH_TRAFFIC_LANE', 'TIDAL_FLOW_LANE', 'TURNING_LANE', 'VERGE', '__EXTENDED']):
            raise ValueError("must be one of enum values ('ALL_LANES_COMPLETE_CARRIAGEWAY', 'BUS_LANE', 'BUS_STOP', 'CAR_POOL_LANE', 'CENTRAL_RESERVATION', 'CRAWLER_LANE', 'CYCLE_LANE', 'EMERGENCY_LANE', 'ESCAPE_LANE', 'EXPRESS_LANE', 'HARD_SHOULDER', 'HEAVY_VEHICLE_LANE', 'LAY_BY', 'LEFT_HAND_TURNING_LANE', 'LEFT_LANE', 'LOCAL_TRAFFIC_LANE', 'MIDDLE_LANE', 'OVERTAKING_LANE', 'RIGHT_HAND_TURNING_LANE', 'RIGHT_LANE', 'RUSH_HOUR_LANE', 'SET_DOWN_AREA', 'SLOW_VEHICLE_LANE', 'THROUGH_TRAFFIC_LANE', 'TIDAL_FLOW_LANE', 'TURNING_LANE', 'VERGE', '__EXTENDED')")
        return value

    @field_validator('get_extended_value')
    def get_extended_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADVISORY_CYCLE_LANE', 'BRIDLE_PATH', 'BUS_AND_CYCLE_LANE', 'FOOT_AND_CYCLE_PATH', 'GUIDED_BUS_WAY', 'TAXI_LANE', 'TAXI_RANK', 'TOLL_LANE', 'TROLLEY_BUS_LANE']):
            raise ValueError("must be one of enum values ('ADVISORY_CYCLE_LANE', 'BRIDLE_PATH', 'BUS_AND_CYCLE_LANE', 'FOOT_AND_CYCLE_PATH', 'GUIDED_BUS_WAY', 'TAXI_LANE', 'TAXI_RANK', 'TOLL_LANE', 'TROLLEY_BUS_LANE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LaneEnum from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LaneEnum from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "value": obj.get("value"),
            "get_ExtendedValue": obj.get("get_ExtendedValue")
        })
        return _obj


