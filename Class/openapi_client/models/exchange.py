# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.catalogue_reference import CatalogueReference
from openapi_client.models.extension_type import ExtensionType
from openapi_client.models.filter_reference import FilterReference
from openapi_client.models.international_identifier import InternationalIdentifier
from openapi_client.models.subscription import Subscription
from openapi_client.models.target import Target
from typing import Optional, Set
from typing_extensions import Self

class Exchange(BaseModel):
    """
    Exchange
    """ # noqa: E501
    changed_flag: Optional[StrictStr] = Field(default=None, alias="changedFlag")
    client_identification: Optional[StrictStr] = Field(default=None, alias="clientIdentification")
    delivery_break: Optional[StrictBool] = Field(default=None, alias="deliveryBreak")
    deny_reason: Optional[StrictStr] = Field(default=None, alias="denyReason")
    historical_start_date: Optional[datetime] = Field(default=None, alias="historicalStartDate")
    historical_stop_date: Optional[datetime] = Field(default=None, alias="historicalStopDate")
    keep_alive: Optional[StrictBool] = Field(default=None, alias="keepAlive")
    request_type: Optional[StrictStr] = Field(default=None, alias="requestType")
    response: Optional[StrictStr] = None
    subscription_reference: Optional[StrictStr] = Field(default=None, alias="subscriptionReference")
    supplier_identification: InternationalIdentifier = Field(alias="supplierIdentification")
    target: Optional[Target] = None
    subscription: Optional[Subscription] = None
    filter_references: Optional[List[FilterReference]] = Field(default=None, alias="filterReferences")
    catalogue_references: Optional[List[CatalogueReference]] = Field(default=None, alias="catalogueReferences")
    exchange_extension: Optional[ExtensionType] = Field(default=None, alias="exchangeExtension")
    __properties: ClassVar[List[str]] = ["changedFlag", "clientIdentification", "deliveryBreak", "denyReason", "historicalStartDate", "historicalStopDate", "keepAlive", "requestType", "response", "subscriptionReference", "supplierIdentification", "target", "subscription", "filterReferences", "catalogueReferences", "exchangeExtension"]

    @field_validator('changed_flag')
    def changed_flag_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CATALOGUE', 'FILTER']):
            raise ValueError("must be one of enum values ('CATALOGUE', 'FILTER')")
        return value

    @field_validator('deny_reason')
    def deny_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_REASON', 'WRONG_CATALOGUE', 'WRONG_FILTER', 'WRONG_ORDER', 'WRONG_PARTNER']):
            raise ValueError("must be one of enum values ('UNKNOWN_REASON', 'WRONG_CATALOGUE', 'WRONG_FILTER', 'WRONG_ORDER', 'WRONG_PARTNER')")
        return value

    @field_validator('request_type')
    def request_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CATALOGUE', 'FILTER', 'REQUEST_DATA', 'REQUEST_HISTORICAL_DATA', 'SUBSCRIPTION']):
            raise ValueError("must be one of enum values ('CATALOGUE', 'FILTER', 'REQUEST_DATA', 'REQUEST_HISTORICAL_DATA', 'SUBSCRIPTION')")
        return value

    @field_validator('response')
    def response_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACKNOWLEDGE', 'CATALOGUE_REQUEST_DENIED', 'FILTER_REQUEST_DENIED', 'REQUEST_DENIED', 'SUBSCRIPTION_REQUEST_DENIED']):
            raise ValueError("must be one of enum values ('ACKNOWLEDGE', 'CATALOGUE_REQUEST_DENIED', 'FILTER_REQUEST_DENIED', 'REQUEST_DENIED', 'SUBSCRIPTION_REQUEST_DENIED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Exchange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of supplier_identification
        if self.supplier_identification:
            _dict['supplierIdentification'] = self.supplier_identification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filter_references (list)
        _items = []
        if self.filter_references:
            for _item in self.filter_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filterReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in catalogue_references (list)
        _items = []
        if self.catalogue_references:
            for _item in self.catalogue_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['catalogueReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of exchange_extension
        if self.exchange_extension:
            _dict['exchangeExtension'] = self.exchange_extension.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Exchange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changedFlag": obj.get("changedFlag"),
            "clientIdentification": obj.get("clientIdentification"),
            "deliveryBreak": obj.get("deliveryBreak"),
            "denyReason": obj.get("denyReason"),
            "historicalStartDate": obj.get("historicalStartDate"),
            "historicalStopDate": obj.get("historicalStopDate"),
            "keepAlive": obj.get("keepAlive"),
            "requestType": obj.get("requestType"),
            "response": obj.get("response"),
            "subscriptionReference": obj.get("subscriptionReference"),
            "supplierIdentification": InternationalIdentifier.from_dict(obj["supplierIdentification"]) if obj.get("supplierIdentification") is not None else None,
            "target": Target.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "subscription": Subscription.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "filterReferences": [FilterReference.from_dict(_item) for _item in obj["filterReferences"]] if obj.get("filterReferences") is not None else None,
            "catalogueReferences": [CatalogueReference.from_dict(_item) for _item in obj["catalogueReferences"]] if obj.get("catalogueReferences") is not None else None,
            "exchangeExtension": ExtensionType.from_dict(obj["exchangeExtension"]) if obj.get("exchangeExtension") is not None else None
        })
        return _obj


