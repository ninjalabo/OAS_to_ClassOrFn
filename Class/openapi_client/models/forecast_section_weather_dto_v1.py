# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.forecast_section_weather_forecast_dto_v1 import ForecastSectionWeatherForecastDtoV1
from typing import Optional, Set
from typing_extensions import Self

class ForecastSectionWeatherDtoV1(BaseModel):
    """
    Forecast section weather forecasts
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="VERSION 1: Forecast section identifier 15 characters ie. 00004_112_000_0: <br> 1. Road number 5 characters ie. 00004, <br> 2. Road section 3 characters ie. 112, <br> 3. Road section version 3 characters ie. 000, <br> 4. Reserved for future needs 1 characters default 0 <br> <br> VERSION 2: Forecast section identifier ie. 00004_342_01435_0_274.569: <br> 1. Road number 5 characters ie. 00004, <br> 2. Road section 3 characters ie. 342, <br> 3. Start distance 5 characters ie. 000, <br> 4. Carriageway 1 character, <br> 5. Measure value of link start point. Varying number of characters ie. 274.569, <br> Refers to Digiroad content at https://aineistot.vayla.fi/digiroad/")
    forecasts: Optional[List[ForecastSectionWeatherForecastDtoV1]] = Field(default=None, description="Forecast section's weather forecasts")
    data_updated_time: datetime = Field(description="Data last updated time", alias="dataUpdatedTime")
    __properties: ClassVar[List[str]] = ["id", "forecasts", "dataUpdatedTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ForecastSectionWeatherDtoV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in forecasts (list)
        _items = []
        if self.forecasts:
            for _item in self.forecasts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['forecasts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ForecastSectionWeatherDtoV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "forecasts": [ForecastSectionWeatherForecastDtoV1.from_dict(_item) for _item in obj["forecasts"]] if obj.get("forecasts") is not None else None,
            "dataUpdatedTime": obj.get("dataUpdatedTime")
        })
        return _obj


