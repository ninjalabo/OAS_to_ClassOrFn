# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sign_text_row_v1 import SignTextRowV1
from typing import Optional, Set
from typing_extensions import Self

class VariableSignPropertiesV1(BaseModel):
    """
    Variable Sign properties
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id")
    type: Optional[StrictStr] = Field(default=None, description="Type")
    road_address: Optional[StrictStr] = Field(default=None, description="Sign location as road address", alias="roadAddress")
    direction: Optional[StrictStr] = Field(default=None, description="Direction of variable sign, increasing or decreasing road address")
    carriageway: Optional[StrictStr] = Field(default=None, description="Variable sign placement: SINGLE = Single carriageway rod RIGHT = First carriageway on the right in the direction of the road number LEFT = Second carriageway on the left in the direction of the road number BETWEEN = Between the carriageways")
    display_value: Optional[StrictStr] = Field(default=None, description="Value that is displayed on the device", alias="displayValue")
    additional_information: Optional[StrictStr] = Field(default=None, description="Additional information displayed on the device", alias="additionalInformation")
    effect_date: Optional[datetime] = Field(default=None, description="Information is effect after this date", alias="effectDate")
    cause: Optional[StrictStr] = Field(default=None, description="Cause for changing the sign: Automaatti = Automatic KÃ¤siohjaus = By hand")
    reliability: Optional[StrictStr] = Field(default=None, description="Variable sign reliability")
    text_rows: Optional[List[SignTextRowV1]] = Field(default=None, description="Text rows if sign contains a screen", alias="textRows")
    __properties: ClassVar[List[str]] = ["id", "type", "roadAddress", "direction", "carriageway", "displayValue", "additionalInformation", "effectDate", "cause", "reliability", "textRows"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SPEEDLIMIT', 'WARNING', 'INFORMATION']):
            raise ValueError("must be one of enum values ('SPEEDLIMIT', 'WARNING', 'INFORMATION')")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INCREASING', 'DECREASING']):
            raise ValueError("must be one of enum values ('INCREASING', 'DECREASING')")
        return value

    @field_validator('carriageway')
    def carriageway_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SINGLE', 'RIGHT', 'LEFT', 'BETWEEN', 'END_OF_ROAD', 'ALONG', 'ACROSS']):
            raise ValueError("must be one of enum values ('SINGLE', 'RIGHT', 'LEFT', 'BETWEEN', 'END_OF_ROAD', 'ALONG', 'ACROSS')")
        return value

    @field_validator('reliability')
    def reliability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'DISCONNECTED', 'MALFUNCTION']):
            raise ValueError("must be one of enum values ('NORMAL', 'DISCONNECTED', 'MALFUNCTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VariableSignPropertiesV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in text_rows (list)
        _items = []
        if self.text_rows:
            for _item in self.text_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['textRows'] = _items
        # set to None if direction (nullable) is None
        # and model_fields_set contains the field
        if self.direction is None and "direction" in self.model_fields_set:
            _dict['direction'] = None

        # set to None if additional_information (nullable) is None
        # and model_fields_set contains the field
        if self.additional_information is None and "additional_information" in self.model_fields_set:
            _dict['additionalInformation'] = None

        # set to None if cause (nullable) is None
        # and model_fields_set contains the field
        if self.cause is None and "cause" in self.model_fields_set:
            _dict['cause'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VariableSignPropertiesV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "roadAddress": obj.get("roadAddress"),
            "direction": obj.get("direction"),
            "carriageway": obj.get("carriageway"),
            "displayValue": obj.get("displayValue"),
            "additionalInformation": obj.get("additionalInformation"),
            "effectDate": obj.get("effectDate"),
            "cause": obj.get("cause"),
            "reliability": obj.get("reliability"),
            "textRows": [SignTextRowV1.from_dict(_item) for _item in obj["textRows"]] if obj.get("textRows") is not None else None
        })
        return _obj


