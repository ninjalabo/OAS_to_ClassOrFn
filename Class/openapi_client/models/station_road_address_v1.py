# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StationRoadAddressV1(BaseModel):
    """
    Road station road address
    """ # noqa: E501
    road_number: Optional[StrictInt] = Field(default=None, description="Road number (values 1–99999)", alias="roadNumber")
    road_section: Optional[StrictInt] = Field(default=None, description="Road section (values 1–999)", alias="roadSection")
    distance_from_road_section_start: Optional[StrictInt] = Field(default=None, description="Distance from start of the road portion [m]", alias="distanceFromRoadSectionStart")
    carriageway: Optional[StrictStr] = Field(default=None, description="Carriageway <br>ONE_CARRIAGEWAY:                                0 = One carriageway road section <br>DUAL_CARRIAGEWAY_RIGHT_IN_INCREASING_DIRECTION: 1 = Dual carriageway's right carriageway on increasing direction <br>DUAL_CARRIAGEWAY_LEFT_IN_INCREASING_DIRECTION:  2 = Dual carriageway's left carriageway on increasing direction (upstream)")
    side: Optional[StrictStr] = Field(default=None, description="Road address side information <br>* UNKNOWN: 0 = Unknown, <br>* RIGHT    1 = On the right side of the carriageway in the increasing direction, <br>* LEFT:    2 = On the left side of the carriageway in the increasing direction, <br>* BETWEEN: 3 = Between the carriageways, <br>* END:     7 = At the end of the road, <br>* MIDDLE:  8 = In the middle of the carriageway / on the carriageway, <br>* CROSS:   9 = Across the road")
    contract_area: Optional[StrictStr] = Field(default=None, description="Road contract area", alias="contractArea")
    contract_area_code: Optional[StrictInt] = Field(default=None, description="Road contract area code", alias="contractAreaCode")
    __properties: ClassVar[List[str]] = ["roadNumber", "roadSection", "distanceFromRoadSectionStart", "carriageway", "side", "contractArea", "contractAreaCode"]

    @field_validator('carriageway')
    def carriageway_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ONE_CARRIAGEWAY', 'DUAL_CARRIAGEWAY_RIGHT_IN_INCREASING_DIRECTION', 'DUAL_CARRIAGEWAY_LEFT_IN_INCREASING_DIRECTION']):
            raise ValueError("must be one of enum values ('ONE_CARRIAGEWAY', 'DUAL_CARRIAGEWAY_RIGHT_IN_INCREASING_DIRECTION', 'DUAL_CARRIAGEWAY_LEFT_IN_INCREASING_DIRECTION')")
        return value

    @field_validator('side')
    def side_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'RIGHT', 'LEFT', 'BETWEEN', 'END', 'MIDDLE', 'CROSS']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'RIGHT', 'LEFT', 'BETWEEN', 'END', 'MIDDLE', 'CROSS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StationRoadAddressV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StationRoadAddressV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "roadNumber": obj.get("roadNumber"),
            "roadSection": obj.get("roadSection"),
            "distanceFromRoadSectionStart": obj.get("distanceFromRoadSectionStart"),
            "carriageway": obj.get("carriageway"),
            "side": obj.get("side"),
            "contractArea": obj.get("contractArea"),
            "contractAreaCode": obj.get("contractAreaCode")
        })
        return _obj


