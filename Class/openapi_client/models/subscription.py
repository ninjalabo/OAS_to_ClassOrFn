# coding: utf-8

"""
    Digitraffic Road API

    [OpenAPI document](/swagger/openapi.json)   Digitraffic is a service operated by the [Fintraffic](https://www.fintraffic.fi) offering real time traffic information. Currently the service covers *road, marine and rail* traffic. More information can be found at the [Digitraffic website](https://www.digitraffic.fi/)   The service has a public Google-group [road.digitraffic.fi](https://groups.google.com/forum/#!forum/roaddigitrafficfi) for communication between developers, service administrators and Fintraffic. The discussion in the forum is mostly in Finnish, but you're welcome to communicate in English too.   ### General notes of the API * Many Digitraffic APIs use GeoJSON as data format. Definition of the GeoJSON format can be found at https://tools.ietf.org/html/rfc7946. * For dates and times [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format is used with \"Zulu\" zero offset from UTC unless otherwise specified (i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]Z\"). E.g. 2019-11-01T06:30:00Z.

    The version of the OpenAPI document: Branch: master, tag: 2024.10.28-1 #ef5bdf3 @ 2024-10-29T08:05:03+0000
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.catalogue_reference import CatalogueReference
from openapi_client.models.extension_type import ExtensionType
from openapi_client.models.filter_reference import FilterReference
from openapi_client.models.target import Target
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    Subscription
    """ # noqa: E501
    delete_subscription: Optional[StrictBool] = Field(default=None, alias="deleteSubscription")
    delivery_interval: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="deliveryInterval")
    operating_mode: StrictStr = Field(alias="operatingMode")
    subscription_start_time: datetime = Field(alias="subscriptionStartTime")
    subscription_state: StrictStr = Field(alias="subscriptionState")
    subscription_stop_time: Optional[datetime] = Field(default=None, alias="subscriptionStopTime")
    update_method: StrictStr = Field(alias="updateMethod")
    targets: List[Target]
    filter_reference: Optional[FilterReference] = Field(default=None, alias="filterReference")
    catalogue_reference: Optional[CatalogueReference] = Field(default=None, alias="catalogueReference")
    subscription_extension: Optional[ExtensionType] = Field(default=None, alias="subscriptionExtension")
    __properties: ClassVar[List[str]] = ["deleteSubscription", "deliveryInterval", "operatingMode", "subscriptionStartTime", "subscriptionState", "subscriptionStopTime", "updateMethod", "targets", "filterReference", "catalogueReference", "subscriptionExtension"]

    @field_validator('operating_mode')
    def operating_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['OPERATING_MODE_0', 'OPERATING_MODE_1', 'OPERATING_MODE_2', 'OPERATING_MODE_3']):
            raise ValueError("must be one of enum values ('OPERATING_MODE_0', 'OPERATING_MODE_1', 'OPERATING_MODE_2', 'OPERATING_MODE_3')")
        return value

    @field_validator('subscription_state')
    def subscription_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACTIVE', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'SUSPENDED')")
        return value

    @field_validator('update_method')
    def update_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ALL_ELEMENT_UPDATE', 'SINGLE_ELEMENT_UPDATE', 'SNAPSHOT']):
            raise ValueError("must be one of enum values ('ALL_ELEMENT_UPDATE', 'SINGLE_ELEMENT_UPDATE', 'SNAPSHOT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item in self.targets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['targets'] = _items
        # override the default output from pydantic by calling `to_dict()` of filter_reference
        if self.filter_reference:
            _dict['filterReference'] = self.filter_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of catalogue_reference
        if self.catalogue_reference:
            _dict['catalogueReference'] = self.catalogue_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription_extension
        if self.subscription_extension:
            _dict['subscriptionExtension'] = self.subscription_extension.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deleteSubscription": obj.get("deleteSubscription"),
            "deliveryInterval": obj.get("deliveryInterval"),
            "operatingMode": obj.get("operatingMode"),
            "subscriptionStartTime": obj.get("subscriptionStartTime"),
            "subscriptionState": obj.get("subscriptionState"),
            "subscriptionStopTime": obj.get("subscriptionStopTime"),
            "updateMethod": obj.get("updateMethod"),
            "targets": [Target.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "filterReference": FilterReference.from_dict(obj["filterReference"]) if obj.get("filterReference") is not None else None,
            "catalogueReference": CatalogueReference.from_dict(obj["catalogueReference"]) if obj.get("catalogueReference") is not None else None,
            "subscriptionExtension": ExtensionType.from_dict(obj["subscriptionExtension"]) if obj.get("subscriptionExtension") is not None else None
        })
        return _obj


